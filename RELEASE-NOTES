udev 062
========
Mostly a Bugfix release.

Added WAIT_FOR_SYSFS="<attribute>" to be able to fight against the sysfs
timing with custom rules.

udev 061
========
We changed the  internal rule storage format. Our large rule files took
2 MB of RAM, with the change we are down to 99kB.

If the device-node has been created with default name and no symlink or
options are to remenber, it is not longer stored in the udevdb. HAL will
need to be updated to work correctly with that change.

To overrride optimization flags, OPTFLAGS may be used now.

udev 060
========
Bugfix release.

udev 059
========
Major changes happened with this release. The goal is to take over the
complete kernel-event handling and provide a more efficient way to dispatch
kernel events. Replacing most of the current shell script logic and the
kernel forked helper with a netlink-daemon and a rule-based event handling.

o udevd listens to netlink events now. The first valid netlink event
  will make udevd ignore any message from udevsend that contains a
  SEQNUM, to avoid duplicate events. The forked events can be disabled
  with:
    echo "" > /proc/sys/kernel/hotplug
  For full support, the broken input-subsytem needs to be fixed, not to
  bypass the driver core.

o /etc/dev.d/ + /etc/hotplug.d/ directory multiplexing is completely
  removed from udev itself and must be emulated by calling small
  helper binaries provided in the extras folder:
    make EXTRAS=extras/run_directory/
  will build udev_run_devd and udev_run_hotplugd, which can be called
  from a rule if needed:
    RUN+="/sbin/udev_run_hotplugd"
  The recommended way to handle this is to convert all the calls from
  the directories to explicit udev rules and get completely rid of the
  multiplexing. (To catch a ttyUSB event, you now no longer need to
  fork and exit 300 tty script instances you are not interested in, it
  is just one rule that matches exactly the device.)

o udev handles now _all_ events not just events for class and block
  devices, this way it is possible to control the complete event
  behavior with udev rules. Especially useful for rules like:
    ACTION="add", DEVPATH="/devices/*", MODALIAS=="?*", RUN+="/sbin/modprobe $modalias"

o As used in the modalias rule, udev supports now textual
  substitution placeholder along with the usual format chars. This
  needs to be documented, for now it's only visible in udev_rules_parse.c.

o The rule keys support now more operations. This is documented in the
  man page. It is possible to add values to list-keys like the SYMLINK
  and RUN list with KEY+="value" and to clear the list by assigning KEY="".
  Also "final"-assignments are supported by using KEY:="value", which will
  prevent changing the key by any later rule.

o kernel 2.6.12 has the "detached_state" attribute removed from
  sysfs, which was used to recognize sysfs population. We switched that
  to wait for the "bus" link, which is only available in kernels after 2.6.11.
  Running this udev version on older kernels may cause a short delay for
  some events.

o To provide infrastructure for persistent device naming, the id programs:
  scsi_id, vol_id (former udev_volume_id), and ata_id (new) are able now
  to export the probed data in environment key format:
    pim:~ # /sbin/ata_id --export /dev/hda
    ID_MODEL=HTS726060M9AT00
    ID_SERIAL=MRH401M4G6UM9B
    ID_REVISION=MH4OA6BA

  The following rules:
    KERNEL="hd*[!0-9]", IMPORT="/sbin/ata_id --export $tempnode"
    KERNEL="hd*[!0-9]", ENV{ID_SERIAL}=="?*", SYMLINK+="disk/by-id/$env{ID_MODEL}_$env{ID_SERIAL}"

  Will create:
    kay@pim:~> tree /dev/disk
    /dev/disk
    |-- by-id
    |   |-- HTS726060M9AT00_MRH401M4G6UM9B -> ../../hda
    |   `-- IBM-Memory_Key -> ../../sda
    |-- by-label
    |   |-- swap -> ../../hda1
    |   |-- date -> ../../sda1
    |   `-- home -> ../../hda3
    `-- by-uuid
        |-- 2E08712B0870F2E7 -> ../../hda3
        |-- 9352cfef-7687-47bc-a2a3-34cf136f72e1 -> ../../hda1
        |-- E845-7A89 -> ../../sda1
        `-- b2a61681-3812-4f13-a4ff-920d70604299 -> ../../hda2

  The IMPORT= operation will import these keys in the environment and make
  it available for later PROGRAM= and RUN= executed programs. The keys are
  also stored in the udevdb and can be queried from there with one of the
  next udev versions.

o A few binaries are silently added to the repository, which can be used
  to replay kernel events from initramfs instead of using coldplug. udevd
  can be instructed now to queue-up events while the stored events from
  initramfs are filled into the udevd-queue. This code is still under
  development and there is no documentation now besides the code itself.
  The additional binaries get compiled, but are not installed by default.

o There is also a temporary fix for a performance problem where too many
  events happen in parallel and every event needs to parse the rules.
  udev can now read precompiled rules stored on disk. This is likely to be
  replaced by a more elegant solution in a future udev version.

udev 058
========
With kernel version 2.6.12, the sysfs file "detached_state" was removed.
Fix for libsysfs not to expect this file was added.

udev 057
========
All rules are applied now, but only the first matching rule with a NAME-key
will be applied. All later rules with NAME-key are completely ignored. This
way system supplied symlinks or permissions gets applied to user-defined
naming rules.

Note:
Please check your rules setup, if you may need to add OPTIONS="last_rule"
to some rules, to keep the old behavior.

The rules are read on "remove"-events too. That makes is possible to match
with keys that are available on remove (KERNEL, SUBSYSTEM, ID, ENV, ...) to
instruct udev to ignore an event (OPTIONS="ignore_device").
The new ACTION-key may be used to let a rule act only at a "remove"-event.

The new RUN-key supports rule-based execution of programs after device-node
handling. This is meant as a general replacement for the dev.d/-directories
to give fine grained control over the execution of programs.

The %s{}-sysfs format char replacement values are searched at any of the
devices in the device chain now, not only at the class-device.

We support log priority levels now. The value udev_log in udev.conf is used
to determine what is printed to syslog. This makes it possible to
run a version with compiled-in debug messages in a production environment
which is sometimes needed to find a bug.
It is still possible to supress the inclusion of _any_ syslog usage with
USE_LOG=false to create the smallest possible binaries if needed.
The configured udev_log value can be overridden with the environment variable
UDEV_LOG.

udev 056
========
Possible use of a system-wide klibc:
  make USE_KLIBC=true KLCC=/usr/bin/klcc all
will link against an external klibc and our own version will be ignored.

udev 055
========
We support an unlimited count of symlinks now.

If USE_STATIC=true is passed to a glibc build, we link statically and use
a built-in userdb parser to resolve user and group names.

The PLACE= key is gone. It can be replaced by an ID= for a long time, cause
we walk up the chain of physical devices to find a match.

The KEY="<value>" format supports '=', '==', '!=,' , '+=' now. This makes it
easy to skip certain attribute matches without composing rules with weird
character class negations like:
  KERNEL="[!s][!c][!d]*"
this can now be replaced with:
  KERNEL!="scd*"
The current simple '=' is still supported, and should work as it does today,
but existing rules should be converted if possible, to be better readable.

We have new ENV{}== key now, to match against a maximum of 5 environment
variables.

udevstart is its own binary again, cause we don't need co carry this araound
with every forked event.
